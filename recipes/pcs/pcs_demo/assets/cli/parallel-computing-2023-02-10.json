{
    "version": "2.0",
    "metadata": {
        "apiVersion": "2023-02-10",
        "endpointPrefix": "pcs",
        "jsonVersion": "1.0",
        "protocol": "json",
        "ripServiceName": "pcs",
        "serviceAbbreviation": "PCS",
        "serviceFullName": "AWS Parallel Computing Service",
        "serviceId": "Parallel Computing",
        "signatureVersion": "v4",
        "signingName": "pcs",
        "targetPrefix": "AWSParallelComputingService",
        "uid": "parallel-computing-2023-02-10"
    },
    "operations": {
        "CreateCluster": {
            "name": "CreateCluster",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "CreateClusterRequest"
            },
            "output": {
                "shape": "CreateClusterResponse"
            },
            "errors": [
                {
                    "shape": "ServiceQuotaExceededException"
                },
                {
                    "shape": "ThrottlingException"
                },
                {
                    "shape": "ValidationException"
                },
                {
                    "shape": "ConflictException"
                },
                {
                    "shape": "InternalServerException"
                },
                {
                    "shape": "AccessDeniedException"
                }
            ],
            "documentation": "<p>Creates a new PCS cluster.</p>",
            "idempotent": true
        },
        "CreateComputeNodeGroup": {
            "name": "CreateComputeNodeGroup",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "CreateComputeNodeGroupRequest"
            },
            "output": {
                "shape": "CreateComputeNodeGroupResponse"
            },
            "errors": [
                {
                    "shape": "ServiceQuotaExceededException"
                },
                {
                    "shape": "ThrottlingException"
                },
                {
                    "shape": "ValidationException"
                },
                {
                    "shape": "ConflictException"
                },
                {
                    "shape": "ResourceNotFoundException"
                },
                {
                    "shape": "InternalServerException"
                },
                {
                    "shape": "AccessDeniedException"
                }
            ],
            "documentation": "<p>Creates a managed PCS node group that can be associated with a cluster through one or more job queues or as part of the login fleet.</p> <p>A node group represents a managed set of cluster nodes. A node group includes both the definition of the compute properties and its lifecycle management.</p>",
            "idempotent": true
        },
        "CreateQueue": {
            "name": "CreateQueue",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "CreateQueueRequest"
            },
            "output": {
                "shape": "CreateQueueResponse"
            },
            "errors": [
                {
                    "shape": "ServiceQuotaExceededException"
                },
                {
                    "shape": "ThrottlingException"
                },
                {
                    "shape": "ValidationException"
                },
                {
                    "shape": "ConflictException"
                },
                {
                    "shape": "ResourceNotFoundException"
                },
                {
                    "shape": "InternalServerException"
                },
                {
                    "shape": "AccessDeniedException"
                }
            ],
            "documentation": "<p>Creates a cluster job queue. When you create a job queue, you associate one or more NodeGroups to the queue. One NodeGroup can be also mapped to multiple job queues.</p>",
            "idempotent": true
        },
        "DeleteCluster": {
            "name": "DeleteCluster",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "DeleteClusterRequest"
            },
            "output": {
                "shape": "DeleteClusterResponse"
            },
            "errors": [
                {
                    "shape": "ThrottlingException"
                },
                {
                    "shape": "ValidationException"
                },
                {
                    "shape": "ConflictException"
                },
                {
                    "shape": "ResourceNotFoundException"
                },
                {
                    "shape": "InternalServerException"
                },
                {
                    "shape": "AccessDeniedException"
                }
            ],
            "documentation": "<p>Deletes a PCS cluster and all its linked resources, including compute and login instances running in the customer's VPC.</p>",
            "idempotent": true
        },
        "DeleteComputeNodeGroup": {
            "name": "DeleteComputeNodeGroup",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "DeleteComputeNodeGroupRequest"
            },
            "output": {
                "shape": "DeleteComputeNodeGroupResponse"
            },
            "errors": [
                {
                    "shape": "ThrottlingException"
                },
                {
                    "shape": "ValidationException"
                },
                {
                    "shape": "ConflictException"
                },
                {
                    "shape": "ResourceNotFoundException"
                },
                {
                    "shape": "InternalServerException"
                },
                {
                    "shape": "AccessDeniedException"
                }
            ],
            "documentation": "<p>Deletes a cluster compute node group. A compute node group can be deleted only if it does not belong to any job queue.</p>",
            "idempotent": true
        },
        "DeleteQueue": {
            "name": "DeleteQueue",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "DeleteQueueRequest"
            },
            "output": {
                "shape": "DeleteQueueResponse"
            },
            "errors": [
                {
                    "shape": "ThrottlingException"
                },
                {
                    "shape": "ValidationException"
                },
                {
                    "shape": "ConflictException"
                },
                {
                    "shape": "ResourceNotFoundException"
                },
                {
                    "shape": "InternalServerException"
                },
                {
                    "shape": "AccessDeniedException"
                }
            ],
            "documentation": "<p>Deletes a cluster job queue. All nodes belonging to the deleted job queue are terminated unless the node group is associated with multiple queues.</p>",
            "idempotent": true
        },
        "GetCluster": {
            "name": "GetCluster",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "GetClusterRequest"
            },
            "output": {
                "shape": "GetClusterResponse"
            },
            "errors": [
                {
                    "shape": "ThrottlingException"
                },
                {
                    "shape": "ValidationException"
                },
                {
                    "shape": "ConflictException"
                },
                {
                    "shape": "ResourceNotFoundException"
                },
                {
                    "shape": "InternalServerException"
                },
                {
                    "shape": "AccessDeniedException"
                }
            ],
            "documentation": "<p>Returns descriptive information about a PCS cluster.</p>"
        },
        "GetComputeNodeGroup": {
            "name": "GetComputeNodeGroup",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "GetComputeNodeGroupRequest"
            },
            "output": {
                "shape": "GetComputeNodeGroupResponse"
            },
            "errors": [
                {
                    "shape": "ThrottlingException"
                },
                {
                    "shape": "ValidationException"
                },
                {
                    "shape": "ConflictException"
                },
                {
                    "shape": "ResourceNotFoundException"
                },
                {
                    "shape": "InternalServerException"
                },
                {
                    "shape": "AccessDeniedException"
                }
            ],
            "documentation": "<p>Returns descriptive information about a cluster ComputeNodeGroup.</p>"
        },
        "GetQueue": {
            "name": "GetQueue",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "GetQueueRequest"
            },
            "output": {
                "shape": "GetQueueResponse"
            },
            "errors": [
                {
                    "shape": "ThrottlingException"
                },
                {
                    "shape": "ValidationException"
                },
                {
                    "shape": "ConflictException"
                },
                {
                    "shape": "ResourceNotFoundException"
                },
                {
                    "shape": "InternalServerException"
                },
                {
                    "shape": "AccessDeniedException"
                }
            ],
            "documentation": "<p>Returns descriptive information about a PCS Queue.</p>"
        },
        "ListClusters": {
            "name": "ListClusters",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "ListClustersRequest"
            },
            "output": {
                "shape": "ListClustersResponse"
            },
            "errors": [
                {
                    "shape": "ThrottlingException"
                },
                {
                    "shape": "ValidationException"
                },
                {
                    "shape": "ConflictException"
                },
                {
                    "shape": "ResourceNotFoundException"
                },
                {
                    "shape": "InternalServerException"
                },
                {
                    "shape": "AccessDeniedException"
                }
            ],
            "documentation": "<p>Lists the PCS clusters in your AWS account in the specified Region.</p>"
        },
        "ListComputeNodeGroupInstances": {
            "name": "ListComputeNodeGroupInstances",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "ListComputeNodeGroupInstancesRequest"
            },
            "output": {
                "shape": "ListComputeNodeGroupInstancesResponse"
            },
            "errors": [
                {
                    "shape": "ThrottlingException"
                },
                {
                    "shape": "ValidationException"
                },
                {
                    "shape": "ConflictException"
                },
                {
                    "shape": "ResourceNotFoundException"
                },
                {
                    "shape": "InternalServerException"
                },
                {
                    "shape": "AccessDeniedException"
                }
            ],
            "documentation": "<p>Returns descriptive information about instances belonging to a cluster ComputeNodeGroup.</p>"
        },
        "ListComputeNodeGroups": {
            "name": "ListComputeNodeGroups",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "ListComputeNodeGroupsRequest"
            },
            "output": {
                "shape": "ListComputeNodeGroupsResponse"
            },
            "errors": [
                {
                    "shape": "ThrottlingException"
                },
                {
                    "shape": "ValidationException"
                },
                {
                    "shape": "ConflictException"
                },
                {
                    "shape": "ResourceNotFoundException"
                },
                {
                    "shape": "InternalServerException"
                },
                {
                    "shape": "AccessDeniedException"
                }
            ],
            "documentation": "<p>Lists the compute node groups for a PCS cluster.</p>"
        },
        "ListQueues": {
            "name": "ListQueues",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "ListQueuesRequest"
            },
            "output": {
                "shape": "ListQueuesResponse"
            },
            "errors": [
                {
                    "shape": "ThrottlingException"
                },
                {
                    "shape": "ValidationException"
                },
                {
                    "shape": "ConflictException"
                },
                {
                    "shape": "ResourceNotFoundException"
                },
                {
                    "shape": "InternalServerException"
                },
                {
                    "shape": "AccessDeniedException"
                }
            ],
            "documentation": "<p>Lists the job queues for a PCS clusters.</p>"
        },
        "LockServiceLinkedRole": {
            "name": "LockServiceLinkedRole",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "LockServiceLinkedRoleRequest"
            },
            "output": {
                "shape": "LockServiceLinkedRoleResponse"
            },
            "errors": [
                {
                    "shape": "ServiceLinkedRoleLockClientException"
                },
                {
                    "shape": "ServiceLinkedRoleLockServiceException"
                }
            ],
            "documentation": "<p>Lock PCS Service Linked Role used by IAM, for deletion.</p>",
            "internalonly": true
        },
        "RegisterComputeNodeGroupInstance": {
            "name": "RegisterComputeNodeGroupInstance",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "RegisterComputeNodeGroupInstanceRequest"
            },
            "output": {
                "shape": "RegisterComputeNodeGroupInstanceResponse"
            },
            "errors": [
                {
                    "shape": "InternalServerException"
                },
                {
                    "shape": "AccessDeniedException"
                }
            ],
            "documentation": "<p>This API will allow the instances to get the configuration setting they need in order to register with the scheduler controller.</p>"
        },
        "UnlockServiceLinkedRole": {
            "name": "UnlockServiceLinkedRole",
            "http": {
                "method": "POST",
                "requestUri": "/"
            },
            "input": {
                "shape": "UnlockServiceLinkedRoleRequest"
            },
            "output": {
                "shape": "UnlockServiceLinkedRoleResponse"
            },
            "errors": [
                {
                    "shape": "ServiceLinkedRoleLockClientException"
                },
                {
                    "shape": "ServiceLinkedRoleLockServiceException"
                }
            ],
            "documentation": "<p>Unlock PCS Service Linked Role used by IAM.</p>",
            "internalonly": true
        }
    },
    "shapes": {
        "AccessDeniedException": {
            "type": "structure",
            "required": [
                "message"
            ],
            "members": {
                "message": {
                    "shape": "String"
                }
            },
            "exception": true
        },
        "AllocationStrategyType": {
            "type": "string",
            "enum": [
                "lowest-price",
                "capacity-optimized"
            ]
        },
        "AmiType": {
            "type": "string",
            "enum": [
                "AL2",
                "CUSTOM"
            ]
        },
        "Cluster": {
            "type": "structure",
            "required": [
                "name",
                "id",
                "arn",
                "createdAt",
                "modifiedAt"
            ],
            "members": {
                "name": {
                    "shape": "String"
                },
                "id": {
                    "shape": "String"
                },
                "arn": {
                    "shape": "String"
                },
                "createdAt": {
                    "shape": "SyntheticTimestamp_date_time"
                },
                "modifiedAt": {
                    "shape": "SyntheticTimestamp_date_time"
                },
                "scheduler": {
                    "shape": "Scheduler"
                },
                "slurmConfiguration": {
                    "shape": "SlurmConfiguration"
                },
                "status": {
                    "shape": "ClusterStatus"
                },
                "networking": {
                    "shape": "Networking"
                },
                "endpoints": {
                    "shape": "Endpoints"
                },
                "statusInfo": {
                    "shape": "StatusInfo"
                }
            }
        },
        "ClusterIdentifier": {
            "type": "string",
            "documentation": "<p>A name up to 40 characters long or a uuid.</p>",
            "pattern": "([A-Za-z][A-Za-z0-9-]{1,40}|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
        },
        "ClusterList": {
            "type": "list",
            "member": {
                "shape": "ClusterSummary"
            }
        },
        "ClusterName": {
            "type": "string",
            "max": 40,
            "min": 1,
            "pattern": ".*(?=^[A-Za-z][A-Za-z0-9-]*$)(?=(^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}).*)).*"
        },
        "ClusterStatus": {
            "type": "string",
            "enum": [
                "CREATING",
                "ACTIVE",
                "UPDATING",
                "DELETING",
                "CREATE_FAILED",
                "DELETE_FAILED",
                "UPDATE_FAILED"
            ]
        },
        "ClusterSummary": {
            "type": "structure",
            "required": [
                "name",
                "id",
                "arn",
                "createdAt",
                "modifiedAt"
            ],
            "members": {
                "name": {
                    "shape": "String"
                },
                "id": {
                    "shape": "String"
                },
                "arn": {
                    "shape": "String"
                },
                "createdAt": {
                    "shape": "SyntheticTimestamp_date_time"
                },
                "modifiedAt": {
                    "shape": "SyntheticTimestamp_date_time"
                },
                "status": {
                    "shape": "ClusterStatus"
                }
            }
        },
        "ComputeNodeGroup": {
            "type": "structure",
            "required": [
                "name",
                "id",
                "arn",
                "clusterId",
                "createdAt",
                "modifiedAt",
                "status",
                "amiType",
                "subnetIds",
                "customLaunchTemplate",
                "iamInstanceProfile",
                "scalingConfig",
                "instances"
            ],
            "members": {
                "name": {
                    "shape": "ComputeNodeGroupName"
                },
                "id": {
                    "shape": "String"
                },
                "arn": {
                    "shape": "String"
                },
                "clusterId": {
                    "shape": "String"
                },
                "createdAt": {
                    "shape": "SyntheticTimestamp_date_time"
                },
                "modifiedAt": {
                    "shape": "SyntheticTimestamp_date_time"
                },
                "status": {
                    "shape": "ComputeNodeGroupStatus"
                },
                "amiType": {
                    "shape": "AmiType",
                    "documentation": "<p>The AMI type for the node group. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify amiType.</p>"
                },
                "subnetIds": {
                    "shape": "SubnetIdList"
                },
                "purchaseOption": {
                    "shape": "PurchaseOption"
                },
                "allocationStrategy": {
                    "shape": "AllocationStrategyType"
                },
                "customLaunchTemplate": {
                    "shape": "CustomLaunchTemplate",
                    "documentation": "<p>An object representing a node group's launch template specification. This provides full control on instance launch attributes. When specified you cannot use any other node group parameters that control instance launch settings.</p>"
                },
                "iamInstanceProfile": {
                    "shape": "IamInstanceProfile"
                },
                "scalingConfig": {
                    "shape": "ScalingConfig"
                },
                "instances": {
                    "shape": "InstanceList"
                },
                "slurmConfiguration": {
                    "shape": "ComputeNodeGroupSlurmConfiguration"
                },
                "statusInfo": {
                    "shape": "StatusInfo"
                }
            }
        },
        "ComputeNodeGroupConfiguration": {
            "type": "structure",
            "members": {
                "computeNodeGroupId": {
                    "shape": "String"
                }
            }
        },
        "ComputeNodeGroupConfigurationList": {
            "type": "list",
            "member": {
                "shape": "ComputeNodeGroupConfiguration"
            }
        },
        "ComputeNodeGroupIdentifier": {
            "type": "string",
            "documentation": "<p>A name up to 25 characters long or a uuid.</p>",
            "pattern": "([A-Za-z][A-Za-z0-9-]{1,25}|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
        },
        "ComputeNodeGroupInstance": {
            "type": "structure",
            "required": [
                "name",
                "instanceId",
                "instanceType"
            ],
            "members": {
                "name": {
                    "shape": "String"
                },
                "instanceId": {
                    "shape": "String"
                },
                "instanceType": {
                    "shape": "String"
                }
            }
        },
        "ComputeNodeGroupInstanceList": {
            "type": "list",
            "member": {
                "shape": "ComputeNodeGroupInstance"
            }
        },
        "ComputeNodeGroupList": {
            "type": "list",
            "member": {
                "shape": "ComputeNodeGroupSummary"
            }
        },
        "ComputeNodeGroupName": {
            "type": "string",
            "max": 25,
            "min": 1,
            "pattern": "[A-Za-z][A-Za-z0-9-]*"
        },
        "ComputeNodeGroupSlurmConfiguration": {
            "type": "structure",
            "members": {
                "slurmCustomSettings": {
                    "shape": "SlurmCustomSettings"
                }
            }
        },
        "ComputeNodeGroupStatus": {
            "type": "string",
            "enum": [
                "CREATING",
                "ACTIVE",
                "UPDATING",
                "DELETING",
                "CREATE_FAILED",
                "DELETE_FAILED",
                "UPDATE_FAILED",
                "DELETED"
            ]
        },
        "ComputeNodeGroupSummary": {
            "type": "structure",
            "required": [
                "name",
                "id",
                "arn",
                "clusterId",
                "createdAt",
                "modifiedAt",
                "status"
            ],
            "members": {
                "name": {
                    "shape": "ComputeNodeGroupName"
                },
                "id": {
                    "shape": "String"
                },
                "arn": {
                    "shape": "String"
                },
                "clusterId": {
                    "shape": "String"
                },
                "createdAt": {
                    "shape": "SyntheticTimestamp_date_time"
                },
                "modifiedAt": {
                    "shape": "SyntheticTimestamp_date_time"
                },
                "status": {
                    "shape": "ComputeNodeGroupStatus"
                }
            }
        },
        "ConflictException": {
            "type": "structure",
            "required": [
                "message",
                "resourceId",
                "resourceType"
            ],
            "members": {
                "message": {
                    "shape": "String"
                },
                "resourceId": {
                    "shape": "String"
                },
                "resourceType": {
                    "shape": "String"
                }
            },
            "exception": true
        },
        "CreateClusterRequest": {
            "type": "structure",
            "required": [
                "clusterName",
                "scheduler",
                "networking"
            ],
            "members": {
                "capiAwsAccountId": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsAccountId of the calling customer </code></pre>",
                    "internalonly": true
                },
                "awsEc2InstanceArn": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsEc2InstanceArn of the calling ec2 instance </code></pre>",
                    "internalonly": true
                },
                "capiEncryptedFasToken": {
                    "shape": "SensitiveString",
                    "documentation": "<p>Encrypted FAS session credentials</p>",
                    "internalonly": true
                },
                "capiEncryptedFasDataKey": {
                    "shape": "SensitiveString",
                    "documentation": "<p>Encrypted DataKey for decrypting FAS credentials</p>",
                    "internalonly": true
                },
                "clusterName": {
                    "shape": "ClusterName",
                    "documentation": "<p>The unique name to give to your cluster.</p>"
                },
                "scheduler": {
                    "shape": "Scheduler",
                    "documentation": "<p>The scheduler configuration for the cluster being created.</p>"
                },
                "networking": {
                    "shape": "Networking"
                },
                "slurmConfiguration": {
                    "shape": "SlurmConfiguration"
                }
            },
            "documentation": "<pre><code>Mixin for all the metadata sent by the CAPI Building Block, including those needed for FAS. These are intended for internal use only and should never be exposed to the external customer </code></pre>"
        },
        "CreateClusterResponse": {
            "type": "structure",
            "members": {
                "cluster": {
                    "shape": "Cluster"
                }
            }
        },
        "CreateComputeNodeGroupRequest": {
            "type": "structure",
            "required": [
                "clusterIdentifier",
                "computeNodeGroupName",
                "subnetIds",
                "customLaunchTemplate",
                "iamInstanceProfile",
                "scalingConfig",
                "instances"
            ],
            "members": {
                "capiAwsAccountId": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsAccountId of the calling customer </code></pre>",
                    "internalonly": true
                },
                "awsEc2InstanceArn": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsEc2InstanceArn of the calling ec2 instance </code></pre>",
                    "internalonly": true
                },
                "capiEncryptedFasToken": {
                    "shape": "SensitiveString",
                    "documentation": "<p>Encrypted FAS session credentials</p>",
                    "internalonly": true
                },
                "capiEncryptedFasDataKey": {
                    "shape": "SensitiveString",
                    "documentation": "<p>Encrypted DataKey for decrypting FAS credentials</p>",
                    "internalonly": true
                },
                "clusterIdentifier": {
                    "shape": "ClusterIdentifier"
                },
                "computeNodeGroupName": {
                    "shape": "ComputeNodeGroupName"
                },
                "amiType": {
                    "shape": "AmiType",
                    "documentation": "<p>The AMI type for the node group. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify amiType.</p>"
                },
                "subnetIds": {
                    "shape": "StringList"
                },
                "purchaseOption": {
                    "shape": "PurchaseOption"
                },
                "allocationStrategy": {
                    "shape": "AllocationStrategyType"
                },
                "customLaunchTemplate": {
                    "shape": "CustomLaunchTemplate",
                    "documentation": "<p>An object representing a node group's launch template specification. This provides full control on instance launch attributes. When specified you cannot use any other node group parameters that control instance launch settings.</p>"
                },
                "iamInstanceProfile": {
                    "shape": "IamInstanceProfile"
                },
                "scalingConfig": {
                    "shape": "ScalingConfig"
                },
                "instances": {
                    "shape": "InstanceList"
                },
                "slurmConfiguration": {
                    "shape": "ComputeNodeGroupSlurmConfiguration"
                }
            },
            "documentation": "<pre><code>Mixin for all the metadata sent by the CAPI Building Block, including those needed for FAS. These are intended for internal use only and should never be exposed to the external customer </code></pre>"
        },
        "CreateComputeNodeGroupResponse": {
            "type": "structure",
            "members": {
                "computeNodeGroup": {
                    "shape": "ComputeNodeGroup"
                }
            }
        },
        "CreateQueueRequest": {
            "type": "structure",
            "required": [
                "clusterIdentifier",
                "queueName"
            ],
            "members": {
                "capiAwsAccountId": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsAccountId of the calling customer </code></pre>",
                    "internalonly": true
                },
                "awsEc2InstanceArn": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsEc2InstanceArn of the calling ec2 instance </code></pre>",
                    "internalonly": true
                },
                "capiEncryptedFasToken": {
                    "shape": "SensitiveString",
                    "documentation": "<p>Encrypted FAS session credentials</p>",
                    "internalonly": true
                },
                "capiEncryptedFasDataKey": {
                    "shape": "SensitiveString",
                    "documentation": "<p>Encrypted DataKey for decrypting FAS credentials</p>",
                    "internalonly": true
                },
                "clusterIdentifier": {
                    "shape": "ClusterIdentifier"
                },
                "queueName": {
                    "shape": "QueueName"
                },
                "computeNodeGroupConfigurations": {
                    "shape": "ComputeNodeGroupConfigurationList"
                }
            },
            "documentation": "<pre><code>Mixin for all the metadata sent by the CAPI Building Block, including those needed for FAS. These are intended for internal use only and should never be exposed to the external customer </code></pre>"
        },
        "CreateQueueResponse": {
            "type": "structure",
            "members": {
                "queue": {
                    "shape": "Queue"
                }
            }
        },
        "CustomLaunchTemplate": {
            "type": "structure",
            "required": [
                "id",
                "version"
            ],
            "members": {
                "id": {
                    "shape": "String"
                },
                "version": {
                    "shape": "String"
                }
            }
        },
        "DeleteClusterRequest": {
            "type": "structure",
            "required": [
                "clusterIdentifier"
            ],
            "members": {
                "capiAwsAccountId": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsAccountId of the calling customer </code></pre>",
                    "internalonly": true
                },
                "awsEc2InstanceArn": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsEc2InstanceArn of the calling ec2 instance </code></pre>",
                    "internalonly": true
                },
                "capiEncryptedFasToken": {
                    "shape": "SensitiveString",
                    "documentation": "<p>Encrypted FAS session credentials</p>",
                    "internalonly": true
                },
                "capiEncryptedFasDataKey": {
                    "shape": "SensitiveString",
                    "documentation": "<p>Encrypted DataKey for decrypting FAS credentials</p>",
                    "internalonly": true
                },
                "clusterIdentifier": {
                    "shape": "ClusterIdentifier"
                }
            },
            "documentation": "<pre><code>Mixin for all the metadata sent by the CAPI Building Block, including those needed for FAS. These are intended for internal use only and should never be exposed to the external customer </code></pre>"
        },
        "DeleteClusterResponse": {
            "type": "structure",
            "members": {}
        },
        "DeleteComputeNodeGroupRequest": {
            "type": "structure",
            "required": [
                "clusterIdentifier",
                "computeNodeGroupIdentifier"
            ],
            "members": {
                "capiAwsAccountId": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsAccountId of the calling customer </code></pre>",
                    "internalonly": true
                },
                "awsEc2InstanceArn": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsEc2InstanceArn of the calling ec2 instance </code></pre>",
                    "internalonly": true
                },
                "capiEncryptedFasToken": {
                    "shape": "SensitiveString",
                    "documentation": "<p>Encrypted FAS session credentials</p>",
                    "internalonly": true
                },
                "capiEncryptedFasDataKey": {
                    "shape": "SensitiveString",
                    "documentation": "<p>Encrypted DataKey for decrypting FAS credentials</p>",
                    "internalonly": true
                },
                "clusterIdentifier": {
                    "shape": "ClusterIdentifier"
                },
                "computeNodeGroupIdentifier": {
                    "shape": "ComputeNodeGroupIdentifier"
                }
            },
            "documentation": "<pre><code>Mixin for all the metadata sent by the CAPI Building Block, including those needed for FAS. These are intended for internal use only and should never be exposed to the external customer </code></pre>"
        },
        "DeleteComputeNodeGroupResponse": {
            "type": "structure",
            "members": {}
        },
        "DeleteQueueRequest": {
            "type": "structure",
            "required": [
                "clusterIdentifier",
                "queueIdentifier"
            ],
            "members": {
                "capiAwsAccountId": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsAccountId of the calling customer </code></pre>",
                    "internalonly": true
                },
                "awsEc2InstanceArn": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsEc2InstanceArn of the calling ec2 instance </code></pre>",
                    "internalonly": true
                },
                "capiEncryptedFasToken": {
                    "shape": "SensitiveString",
                    "documentation": "<p>Encrypted FAS session credentials</p>",
                    "internalonly": true
                },
                "capiEncryptedFasDataKey": {
                    "shape": "SensitiveString",
                    "documentation": "<p>Encrypted DataKey for decrypting FAS credentials</p>",
                    "internalonly": true
                },
                "clusterIdentifier": {
                    "shape": "ClusterIdentifier"
                },
                "queueIdentifier": {
                    "shape": "QueueIdentifier"
                }
            },
            "documentation": "<pre><code>Mixin for all the metadata sent by the CAPI Building Block, including those needed for FAS. These are intended for internal use only and should never be exposed to the external customer </code></pre>"
        },
        "DeleteQueueResponse": {
            "type": "structure",
            "members": {}
        },
        "Endpoint": {
            "type": "structure",
            "required": [
                "type",
                "privateIpAddress",
                "port"
            ],
            "members": {
                "type": {
                    "shape": "EndpointType"
                },
                "privateIpAddress": {
                    "shape": "String"
                },
                "publicIpAddress": {
                    "shape": "String"
                },
                "port": {
                    "shape": "String"
                }
            }
        },
        "EndpointType": {
            "type": "string",
            "enum": [
                "SLURMCTLD",
                "SLURMDBD",
                "ALL"
            ]
        },
        "Endpoints": {
            "type": "list",
            "member": {
                "shape": "Endpoint"
            },
            "documentation": "<p>The endpoints for your scheduler APIs or controller nodes.</p>"
        },
        "GetClusterRequest": {
            "type": "structure",
            "required": [
                "clusterIdentifier"
            ],
            "members": {
                "capiAwsAccountId": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsAccountId of the calling customer </code></pre>",
                    "internalonly": true
                },
                "awsEc2InstanceArn": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsEc2InstanceArn of the calling ec2 instance </code></pre>",
                    "internalonly": true
                },
                "clusterIdentifier": {
                    "shape": "ClusterIdentifier"
                }
            },
            "documentation": "<pre><code>Mixin for all the metadata sent by the CAPI Building Block. These are intended for internal use only and should never be exposed to the external customer </code></pre>"
        },
        "GetClusterResponse": {
            "type": "structure",
            "members": {
                "cluster": {
                    "shape": "Cluster"
                }
            }
        },
        "GetComputeNodeGroupRequest": {
            "type": "structure",
            "required": [
                "clusterIdentifier",
                "computeNodeGroupIdentifier"
            ],
            "members": {
                "capiAwsAccountId": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsAccountId of the calling customer </code></pre>",
                    "internalonly": true
                },
                "awsEc2InstanceArn": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsEc2InstanceArn of the calling ec2 instance </code></pre>",
                    "internalonly": true
                },
                "clusterIdentifier": {
                    "shape": "ClusterIdentifier"
                },
                "computeNodeGroupIdentifier": {
                    "shape": "ComputeNodeGroupIdentifier"
                }
            },
            "documentation": "<pre><code>Mixin for all the metadata sent by the CAPI Building Block. These are intended for internal use only and should never be exposed to the external customer </code></pre>"
        },
        "GetComputeNodeGroupResponse": {
            "type": "structure",
            "members": {
                "computeNodeGroup": {
                    "shape": "ComputeNodeGroup"
                }
            }
        },
        "GetQueueRequest": {
            "type": "structure",
            "required": [
                "clusterIdentifier",
                "queueIdentifier"
            ],
            "members": {
                "capiAwsAccountId": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsAccountId of the calling customer </code></pre>",
                    "internalonly": true
                },
                "awsEc2InstanceArn": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsEc2InstanceArn of the calling ec2 instance </code></pre>",
                    "internalonly": true
                },
                "clusterIdentifier": {
                    "shape": "ClusterIdentifier"
                },
                "queueIdentifier": {
                    "shape": "QueueIdentifier"
                }
            },
            "documentation": "<pre><code>Mixin for all the metadata sent by the CAPI Building Block. These are intended for internal use only and should never be exposed to the external customer </code></pre>"
        },
        "GetQueueResponse": {
            "type": "structure",
            "members": {
                "queue": {
                    "shape": "Queue"
                }
            }
        },
        "IamInstanceProfile": {
            "type": "structure",
            "members": {
                "arn": {
                    "shape": "String"
                }
            }
        },
        "InstanceConfig": {
            "type": "structure",
            "members": {
                "instanceType": {
                    "shape": "String"
                }
            }
        },
        "InstanceList": {
            "type": "list",
            "member": {
                "shape": "InstanceConfig"
            }
        },
        "Integer": {
            "type": "integer",
            "box": true
        },
        "InternalServerException": {
            "type": "structure",
            "required": [
                "message"
            ],
            "members": {
                "message": {
                    "shape": "String"
                }
            },
            "exception": true,
            "fault": true,
            "retryable": {
                "throttling": false
            }
        },
        "ListClustersRequest": {
            "type": "structure",
            "members": {
                "capiAwsAccountId": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsAccountId of the calling customer </code></pre>",
                    "internalonly": true
                },
                "awsEc2InstanceArn": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsEc2InstanceArn of the calling ec2 instance </code></pre>",
                    "internalonly": true
                },
                "nextToken": {
                    "shape": "String"
                },
                "maxResults": {
                    "shape": "MaxResults"
                }
            },
            "documentation": "<pre><code>Mixin for all the metadata sent by the CAPI Building Block. These are intended for internal use only and should never be exposed to the external customer </code></pre>"
        },
        "ListClustersResponse": {
            "type": "structure",
            "required": [
                "clusters"
            ],
            "members": {
                "clusters": {
                    "shape": "ClusterList"
                },
                "nextToken": {
                    "shape": "String"
                }
            }
        },
        "ListComputeNodeGroupInstancesRequest": {
            "type": "structure",
            "required": [
                "clusterIdentifier",
                "computeNodeGroupIdentifier"
            ],
            "members": {
                "capiAwsAccountId": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsAccountId of the calling customer </code></pre>",
                    "internalonly": true
                },
                "awsEc2InstanceArn": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsEc2InstanceArn of the calling ec2 instance </code></pre>",
                    "internalonly": true
                },
                "clusterIdentifier": {
                    "shape": "ClusterIdentifier"
                },
                "computeNodeGroupIdentifier": {
                    "shape": "ComputeNodeGroupIdentifier"
                },
                "nextToken": {
                    "shape": "String"
                },
                "maxResults": {
                    "shape": "MaxResults"
                }
            },
            "documentation": "<pre><code>Mixin for all the metadata sent by the CAPI Building Block. These are intended for internal use only and should never be exposed to the external customer </code></pre>"
        },
        "ListComputeNodeGroupInstancesResponse": {
            "type": "structure",
            "members": {
                "instances": {
                    "shape": "ComputeNodeGroupInstanceList"
                },
                "nextToken": {
                    "shape": "String"
                }
            }
        },
        "ListComputeNodeGroupsRequest": {
            "type": "structure",
            "required": [
                "clusterIdentifier"
            ],
            "members": {
                "capiAwsAccountId": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsAccountId of the calling customer </code></pre>",
                    "internalonly": true
                },
                "awsEc2InstanceArn": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsEc2InstanceArn of the calling ec2 instance </code></pre>",
                    "internalonly": true
                },
                "clusterIdentifier": {
                    "shape": "ClusterIdentifier"
                },
                "nextToken": {
                    "shape": "String"
                },
                "maxResults": {
                    "shape": "MaxResults"
                }
            },
            "documentation": "<pre><code>Mixin for all the metadata sent by the CAPI Building Block. These are intended for internal use only and should never be exposed to the external customer </code></pre>"
        },
        "ListComputeNodeGroupsResponse": {
            "type": "structure",
            "required": [
                "computeNodeGroups"
            ],
            "members": {
                "computeNodeGroups": {
                    "shape": "ComputeNodeGroupList"
                },
                "nextToken": {
                    "shape": "String"
                }
            }
        },
        "ListQueuesRequest": {
            "type": "structure",
            "required": [
                "clusterIdentifier"
            ],
            "members": {
                "capiAwsAccountId": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsAccountId of the calling customer </code></pre>",
                    "internalonly": true
                },
                "awsEc2InstanceArn": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsEc2InstanceArn of the calling ec2 instance </code></pre>",
                    "internalonly": true
                },
                "clusterIdentifier": {
                    "shape": "ClusterIdentifier"
                },
                "nextToken": {
                    "shape": "String"
                },
                "maxResults": {
                    "shape": "MaxResults"
                }
            },
            "documentation": "<pre><code>Mixin for all the metadata sent by the CAPI Building Block. These are intended for internal use only and should never be exposed to the external customer </code></pre>"
        },
        "ListQueuesResponse": {
            "type": "structure",
            "required": [
                "queues"
            ],
            "members": {
                "queues": {
                    "shape": "QueueList"
                },
                "nextToken": {
                    "shape": "String"
                }
            }
        },
        "LockServiceLinkedRoleRequest": {
            "type": "structure",
            "required": [
                "RoleArn",
                "Timeout"
            ],
            "members": {
                "RoleArn": {
                    "shape": "arnType"
                },
                "Timeout": {
                    "shape": "longType"
                }
            }
        },
        "LockServiceLinkedRoleResponse": {
            "type": "structure",
            "required": [
                "CanBeDeleted"
            ],
            "members": {
                "CanBeDeleted": {
                    "shape": "booleanType"
                },
                "ReasonOfFailure": {
                    "shape": "stringType"
                },
                "RelatedResources": {
                    "shape": "stringListType"
                }
            }
        },
        "MaxResults": {
            "type": "integer",
            "box": true,
            "max": 100,
            "min": 1
        },
        "Networking": {
            "type": "structure",
            "required": [
                "subnetIds",
                "securityGroupIds"
            ],
            "members": {
                "subnetIds": {
                    "shape": "SubnetIdList",
                    "documentation": "<p>Specify subnets for your PCS nodes. PCS creates cross-account elastic network interfaces in these subnets to allow communication between your nodes and the Slurm control plane.</p>"
                },
                "securityGroupIds": {
                    "shape": "SecurityGroupIdList",
                    "documentation": "<p>Specify one or more security groups for the cross-account elastic network interfaces that PCS creates and that allow communication between your nodes and the Slurm control plane.</p>"
                }
            },
            "documentation": "<p>The networking configuration that's used by the cluster control plane.</p>"
        },
        "PurchaseOption": {
            "type": "string",
            "enum": [
                "ONDEMAND",
                "SPOT"
            ]
        },
        "Queue": {
            "type": "structure",
            "required": [
                "name",
                "id",
                "arn",
                "clusterId",
                "createdAt",
                "modifiedAt",
                "status",
                "computeNodeGroupConfigurations"
            ],
            "members": {
                "name": {
                    "shape": "QueueName"
                },
                "id": {
                    "shape": "String"
                },
                "arn": {
                    "shape": "String"
                },
                "clusterId": {
                    "shape": "String"
                },
                "createdAt": {
                    "shape": "SyntheticTimestamp_date_time"
                },
                "modifiedAt": {
                    "shape": "SyntheticTimestamp_date_time"
                },
                "status": {
                    "shape": "QueueStatus"
                },
                "computeNodeGroupConfigurations": {
                    "shape": "ComputeNodeGroupConfigurationList"
                },
                "statusInfo": {
                    "shape": "StatusInfo"
                }
            }
        },
        "QueueIdentifier": {
            "type": "string",
            "documentation": "<p>A name up to 25 characters long or a uuid.</p>",
            "pattern": "([A-Za-z][A-Za-z0-9-]{1,25}|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
        },
        "QueueList": {
            "type": "list",
            "member": {
                "shape": "QueueSummary"
            }
        },
        "QueueName": {
            "type": "string",
            "max": 25,
            "min": 1,
            "pattern": "[A-Za-z][A-Za-z0-9-]*"
        },
        "QueueStatus": {
            "type": "string",
            "enum": [
                "CREATING",
                "ACTIVE",
                "UPDATING",
                "DELETING",
                "CREATE_FAILED",
                "DELETE_FAILED",
                "UPDATE_FAILED"
            ]
        },
        "QueueSummary": {
            "type": "structure",
            "required": [
                "name",
                "id",
                "arn",
                "clusterId",
                "createdAt",
                "modifiedAt",
                "status"
            ],
            "members": {
                "name": {
                    "shape": "QueueName"
                },
                "id": {
                    "shape": "String"
                },
                "arn": {
                    "shape": "String"
                },
                "clusterId": {
                    "shape": "String"
                },
                "createdAt": {
                    "shape": "SyntheticTimestamp_date_time"
                },
                "modifiedAt": {
                    "shape": "SyntheticTimestamp_date_time"
                },
                "status": {
                    "shape": "QueueStatus"
                }
            }
        },
        "RegisterComputeNodeGroupInstanceRequest": {
            "type": "structure",
            "required": [
                "clusterIdentifier",
                "bootstrapId"
            ],
            "members": {
                "capiAwsAccountId": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsAccountId of the calling customer </code></pre>",
                    "internalonly": true
                },
                "awsEc2InstanceArn": {
                    "shape": "String",
                    "documentation": "<pre><code>AwsEc2InstanceArn of the calling ec2 instance </code></pre>",
                    "internalonly": true
                },
                "capiEncryptedFasToken": {
                    "shape": "SensitiveString",
                    "documentation": "<p>Encrypted FAS session credentials</p>",
                    "internalonly": true
                },
                "capiEncryptedFasDataKey": {
                    "shape": "SensitiveString",
                    "documentation": "<p>Encrypted DataKey for decrypting FAS credentials</p>",
                    "internalonly": true
                },
                "clusterIdentifier": {
                    "shape": "ClusterIdentifier",
                    "documentation": "<p>The cluster id assigned to your cluster.</p>"
                },
                "bootstrapId": {
                    "shape": "String",
                    "documentation": "<p>Client generated id to allow for retries during worker node bootstrap.</p>"
                }
            },
            "documentation": "<pre><code>Mixin for all the metadata sent by the CAPI Building Block, including those needed for FAS. These are intended for internal use only and should never be exposed to the external customer </code></pre>"
        },
        "RegisterComputeNodeGroupInstanceResponse": {
            "type": "structure",
            "required": [
                "nodeID",
                "sharedSecret",
                "endpoints"
            ],
            "members": {
                "nodeID": {
                    "shape": "String"
                },
                "sharedSecret": {
                    "shape": "SharedSecret"
                },
                "endpoints": {
                    "shape": "Endpoints"
                }
            }
        },
        "ResourceNotFoundException": {
            "type": "structure",
            "required": [
                "message",
                "resourceId",
                "resourceType"
            ],
            "members": {
                "message": {
                    "shape": "String"
                },
                "resourceId": {
                    "shape": "String"
                },
                "resourceType": {
                    "shape": "String"
                }
            },
            "exception": true
        },
        "ScalingConfig": {
            "type": "structure",
            "members": {
                "minInstanceCount": {
                    "shape": "Integer"
                },
                "maxInstanceCount": {
                    "shape": "Integer"
                }
            }
        },
        "Scheduler": {
            "type": "structure",
            "required": [
                "type",
                "version"
            ],
            "members": {
                "type": {
                    "shape": "SchedulerType"
                },
                "version": {
                    "shape": "String"
                }
            }
        },
        "SchedulerType": {
            "type": "string",
            "enum": [
                "SLURM"
            ]
        },
        "SecurityGroupId": {
            "type": "string",
            "pattern": "sg-\\w{8,17}"
        },
        "SecurityGroupIdList": {
            "type": "list",
            "member": {
                "shape": "SecurityGroupId"
            }
        },
        "SensitiveString": {
            "type": "string",
            "sensitive": true
        },
        "ServiceLinkedRoleLockClientException": {
            "type": "structure",
            "members": {
                "message": {
                    "shape": "errorMessage"
                }
            },
            "exception": true
        },
        "ServiceLinkedRoleLockServiceException": {
            "type": "structure",
            "members": {
                "message": {
                    "shape": "errorMessage"
                }
            },
            "exception": true,
            "fault": true
        },
        "ServiceQuotaExceededException": {
            "type": "structure",
            "required": [
                "message",
                "serviceCode"
            ],
            "members": {
                "message": {
                    "shape": "String"
                },
                "serviceCode": {
                    "shape": "String"
                },
                "resourceId": {
                    "shape": "String"
                },
                "resourceType": {
                    "shape": "String"
                },
                "quotaCode": {
                    "shape": "String"
                }
            },
            "exception": true
        },
        "SharedSecret": {
            "type": "string",
            "sensitive": true
        },
        "SlurmConfiguration": {
            "type": "structure",
            "members": {
                "scaleDownIdleTime": {
                    "shape": "SlurmConfigurationScaleDownIdleTimeInteger"
                },
                "slurmCustomSettings": {
                    "shape": "SlurmCustomSettings"
                }
            }
        },
        "SlurmConfigurationScaleDownIdleTimeInteger": {
            "type": "integer",
            "box": true,
            "min": 1
        },
        "SlurmCustomSetting": {
            "type": "structure",
            "required": [
                "parameterName",
                "parameterValue"
            ],
            "members": {
                "parameterName": {
                    "shape": "String"
                },
                "parameterValue": {
                    "shape": "String"
                }
            }
        },
        "SlurmCustomSettings": {
            "type": "list",
            "member": {
                "shape": "SlurmCustomSetting"
            },
            "documentation": "<p>The settings to fine-tune the Slurm configuration</p>"
        },
        "StatusInfo": {
            "type": "structure",
            "members": {
                "code": {
                    "shape": "String"
                },
                "message": {
                    "shape": "String"
                }
            },
            "documentation": "<p>Code and translated message describing the resource status in async path.</p>"
        },
        "String": {
            "type": "string"
        },
        "StringList": {
            "type": "list",
            "member": {
                "shape": "String"
            }
        },
        "SubnetId": {
            "type": "string",
            "pattern": "subnet-\\w{8,17}"
        },
        "SubnetIdList": {
            "type": "list",
            "member": {
                "shape": "SubnetId"
            }
        },
        "SyntheticTimestamp_date_time": {
            "type": "timestamp",
            "timestampFormat": "iso8601"
        },
        "ThrottlingException": {
            "type": "structure",
            "required": [
                "message"
            ],
            "members": {
                "message": {
                    "shape": "String"
                },
                "retryAfterSeconds": {
                    "shape": "Integer"
                }
            },
            "documentation": "<p>ThrottlingException will be thrown when request was denied due to request throttling.</p>",
            "exception": true,
            "retryable": {
                "throttling": false
            }
        },
        "UnlockServiceLinkedRoleRequest": {
            "type": "structure",
            "required": [
                "RoleArn"
            ],
            "members": {
                "RoleArn": {
                    "shape": "arnType"
                },
                "DeletionStatus": {
                    "shape": "deletionStatus"
                }
            }
        },
        "UnlockServiceLinkedRoleResponse": {
            "type": "structure",
            "members": {}
        },
        "ValidationException": {
            "type": "structure",
            "required": [
                "message",
                "reason"
            ],
            "members": {
                "message": {
                    "shape": "String"
                },
                "reason": {
                    "shape": "ValidationExceptionReason"
                },
                "fieldList": {
                    "shape": "ValidationExceptionFieldList"
                }
            },
            "exception": true
        },
        "ValidationExceptionField": {
            "type": "structure",
            "required": [
                "name",
                "message"
            ],
            "members": {
                "name": {
                    "shape": "String"
                },
                "message": {
                    "shape": "String"
                }
            }
        },
        "ValidationExceptionFieldList": {
            "type": "list",
            "member": {
                "shape": "ValidationExceptionField"
            }
        },
        "ValidationExceptionReason": {
            "type": "string",
            "enum": [
                "unknownOperation",
                "cannotParse",
                "fieldValidationFailed",
                "other"
            ]
        },
        "arnType": {
            "type": "string",
            "max": 2048,
            "min": 20
        },
        "booleanType": {
            "type": "boolean"
        },
        "deletionStatus": {
            "type": "string",
            "enum": [
                "SUCCEEDED",
                "FAILED"
            ]
        },
        "errorMessage": {
            "type": "string"
        },
        "longType": {
            "type": "long",
            "box": true
        },
        "stringListType": {
            "type": "list",
            "member": {
                "shape": "stringType"
            }
        },
        "stringType": {
            "type": "string"
        }
    },
    "documentation": "<p>Management APIs for AWS Parallel Computing Service</p>"
}
