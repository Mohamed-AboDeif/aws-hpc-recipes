AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS PCS Getting Started Environment with AMD Instances.
  This template deploys a demonstration cluster using AMD-based instances and AWS Parallel Computing Service (PCS).
  It configures a multi-tier network with FSx Lustre and EFS storage, EFA-enabled instances, and auto-scaling Slurm queues.
  The cluster includes a login node (c7a.xlarge) and two compute queues - high-performance (hpc7a.48xlarge) and general purpose (c7a.xlarge).
  Network security is managed through security groups with client IP restrictions and EFA support.
  Use this template as a starting point for evaluating AWS PCS capabilities with AMD processors.
  Refer to the Outputs tab for cluster access URLs and SSH key pair information.

### Stack metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: PCS Cluster configuration
        Parameters:
          - SlurmVersion
      - Label:
          default: PCS ComputeNodeGroups configuration
        Parameters:
          - ClientIpCidr
      - Label:
          default: HPC Recipes configuration
        Parameters:
          - HpcRecipesS3Bucket
          - HpcRecipesBranch

Parameters:

  SlurmVersion:
    Type: String
    Default: 24.11
    Description: Version of Slurm to use
    AllowedValues:
         - 24.05
         - 24.11

  ClientIpCidr:
    Description: IP(s) allowed to directly access the login nodes. We recommend that you restrict it with your own IP/subnet (x.x.x.x/32 for your own ip or x.x.x.x/24 for range. Replace x.x.x.x with your own PUBLIC IP. You can get your public IP using tools such as https://ifconfig.co/)
    Default: 0.0.0.0/0
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Value must be a valid IP or network range of the form x.x.x.x/x. 

  HpcRecipesS3Bucket:
    Type: String
    Default: aws-hpc-recipes
    Description: HPC Recipes for AWS S3 bucket
    AllowedValues:
         - aws-hpc-recipes
         - aws-hpc-recipes-dev
  HpcRecipesBranch:
    Type: String
    Default: main
    Description: HPC Recipes for AWS release branch
    AllowedPattern: '^(?!.*/\.git$)(?!.*/\.)(?!.*\\.\.)[a-zA-Z0-9-_\.]+$'

Conditions:
  GovCloud: !Equals [!Ref AWS::Partition, 'aws-us-gov']
  China: !Equals [!Ref AWS::Partition, 'aws-cn']

Mappings:

  Architecture:
    AmiArchParameter:
      x86: x86_64
    LoginNodeInstances:
      x86: c7a.xlarge
    ComputeNodeInstances:
      x86: c7a.xlarge
      HPCx86: hpc7a.48xlarge

Resources:

  ##################
  # Create a keypair
  ##################
  CreatedKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties: 
      KeyName: !Sub 'key-${AWS::StackName}'

  ##################
  # Placement groups
  ##################
  PgLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowEC2PlacementGroupManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreatePlacementGroup
                  - ec2:DeletePlacementGroup
                  - ec2:DescribePlacementGroups
                Resource: '*'

  PlacementGroupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt PgLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def handler(event, context):
              ec2 = boto3.client('ec2')
              responseData = {}

              try:
                  if event['RequestType'] == 'Create':
                      ec2.create_placement_group(
                          GroupName=event['ResourceProperties']['PlacementGroupName'],
                          Strategy='cluster'
                      )
                      # Get the placement group ID
                      response = ec2.describe_placement_groups(
                          GroupNames=[event['ResourceProperties']['PlacementGroupName']]
                      )
                      placement_group_id = response['PlacementGroups'][0]['GroupId']
                      responseData['PlacementGroupName'] = event['ResourceProperties']['PlacementGroupName']
                      responseData['PlacementGroupId'] = placement_group_id
                      responseData['Message'] = f"Placement group {event['ResourceProperties']['PlacementGroupName']} created successfully"
                  elif event['RequestType'] == 'Delete':
                      ec2.delete_placement_group(
                          GroupName=event['ResourceProperties']['PlacementGroupName']
                      )
                      responseData['Message'] = f"Placement group {event['ResourceProperties']['PlacementGroupName']} deleted successfully"
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              except Exception as e:
                  responseData['Error'] = str(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData)

      Runtime: python3.12
      Timeout: 30

  # We create a placement group using a Lambda so we can give it a name. This is a 
  # workaround for AWS::EC2::PlacementGroup not having support for setting 
  # placement group name.
  PlacementGroup:
    Type: Custom::PlacementGroup
    Properties:
      ServiceToken: !GetAtt PlacementGroupFunction.Arn
      PlacementGroupName: !Sub 'efa-${AWS::StackName}'

  # Create an EFA security group
  EfaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Support EFA
      GroupName: !Sub "efa-${AWS::StackName}"
      VpcId: !GetAtt [ Networking, Outputs.VpcId ]

  EfaSecurityGroupOutboundSelfRule:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      IpProtocol: "-1"
      GroupId: !Ref EfaSecurityGroup
      Description: Allow outbound EFA traffic to SG members
      DestinationSecurityGroupId: !Ref EfaSecurityGroup

  EfaSecurityGroupInboundSelfRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "-1"
      GroupId: !Ref EfaSecurityGroup
      Description: Allow inbound EFA traffic to SG members
      SourceSecurityGroupId: !Ref EfaSecurityGroup

  # Resolver for FSx Lustre DNS and mount name from ID
  FSxLustreLookupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FSxLustreLookupPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - fsx:DescribeFileSystems
                Resource: "*"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  FSxLustreLookupLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt FSxLustreLookupLambdaRole.Arn
      Runtime: python3.11
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def lambda_handler(event, context):
              fsx_client = boto3.client("fsx")
              
              try:
                  filesystem_id = event["ResourceProperties"]["FilesystemId"]
                  
                  response = fsx_client.describe_file_systems(FileSystemIds=[filesystem_id])
                  
                  if "FileSystems" in response and len(response["FileSystems"]) > 0:
                      filesystem = response["FileSystems"][0]
                      dns_name = filesystem["DNSName"]
                      mount_name = filesystem["LustreConfiguration"]["MountName"]
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          "DNSName": dns_name,
                          "MountName": mount_name
                      })
                  else:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {
                          "Reason": f"Filesystem {filesystem_id} not found"
                      })
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      "Reason": str(e)
                  })

  FSxLustreLookup:
    Type: Custom::FSxLustreLookup
    Properties:
      ServiceToken: !GetAtt FSxLustreLookupLambda.Arn
      FilesystemId: !GetAtt [ FSxLStorage, Outputs.FSxLustreFilesystemId ]

  # Launch template for access node(s)
  LoginLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'login-${AWS::StackName}'
      LaunchTemplateData:
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: HPCRecipes
                Value: "true"
        MetadataOptions:
          HttpEndpoint: enabled
          HttpPutResponseHopLimit: 2
          HttpTokens: required
        KeyName: !Ref CreatedKeyPair
        SecurityGroupIds: 
          - !GetAtt [ PCSSecurityGroup, Outputs.ClusterSecurityGroupId ]
          - !GetAtt [ PCSSecurityGroup, Outputs.InboundSshSecurityGroupId ]
          - !GetAtt [ EfsStorage, Outputs.SecurityGroupId ]
          - !GetAtt [ FSxLStorage, Outputs.FSxLustreSecurityGroupId ]
        UserData:
          Fn::Base64:
            Fn::Sub:
              - |
                MIME-Version: 1.0
                Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

                --==MYBOUNDARY==
                Content-Type: text/cloud-config; charset="us-ascii"
                MIME-Version: 1.0
                
                runcmd:
                  # Mount EFS filesystem as /home
                  - mkdir -p /tmp/home
                  - rsync -a /home/ /tmp/home
                  - echo "${EfsFilesystem}:/ /home efs tls,_netdev" >> /etc/fstab
                  - mount -a -t efs defaults
                  - if [ "enabled" == "$(sestatus | awk "/^SELinux status:/{print $3}")" ]; then setsebool -P use_nfs_home_dirs 1; fi
                  - rsync -a --ignore-existing /tmp/home/ /home
                  - rm -rf /tmp/home/
                  # Mount FSxL filesystem as /fsx
                  - mkdir -p /fsx 
                  - mount -t lustre -o relatime,flock ${FSxLustreDns}@tcp:/${FSxLustreMountName} /fsx
                  - chmod 777 /fsx
                --==MYBOUNDARY==
              - EfsFilesystem: !GetAtt [ EfsStorage, Outputs.EFSFilesystemId ]
                FSxLustreDns: !GetAtt FSxLustreLookup.DNSName
                FSxLustreMountName: !GetAtt FSxLustreLookup.MountName
                Region: !Ref AWS::Region

  # Launch template for compute node(s)
  HpcComputeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'hpc-compute-${AWS::StackName}'
      LaunchTemplateData:
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: HPCRecipes
                Value: "true"
        MetadataOptions:
          HttpEndpoint: enabled
          HttpPutResponseHopLimit: 2
          HttpTokens: required
        Placement:
          GroupName: !GetAtt PlacementGroup.PlacementGroupName
        NetworkInterfaces:
          # hpc7a have dual NICs
          - Description: Primary network interface
            DeviceIndex: 0
            InterfaceType: efa
            NetworkCardIndex: 0
            SubnetId: !GetAtt [ Networking, Outputs.ComputeSubnetId ]
            Groups:
              - !Ref EfaSecurityGroup
              - !GetAtt [ PCSSecurityGroup, Outputs.ClusterSecurityGroupId ]
              - !GetAtt [ EfsStorage, Outputs.SecurityGroupId ]
              - !GetAtt [ FSxLStorage, Outputs.FSxLustreSecurityGroupId ]
          - Description: Secondary network interface
            DeviceIndex: 1
            InterfaceType: efa
            NetworkCardIndex: 1
            SubnetId: !GetAtt [ Networking, Outputs.ComputeSubnetId ]
            Groups:
              - !Ref EfaSecurityGroup
        # KeyName: !Ref SshKeyName
        UserData:
          Fn::Base64:
            Fn::Sub:
              - |
                MIME-Version: 1.0
                Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

                --==MYBOUNDARY==
                Content-Type: text/cloud-config; charset="us-ascii"
                MIME-Version: 1.0
                
                runcmd:
                  # Mount EFS filesystem as /home
                  - mkdir -p /tmp/home
                  - rsync -a /home/ /tmp/home
                  - echo "${EfsFilesystem}:/ /home efs tls,_netdev" >> /etc/fstab
                  - mount -a -t efs defaults
                  - if [ "enabled" == "$(sestatus | awk "/^SELinux status:/{print $3}")" ]; then setsebool -P use_nfs_home_dirs 1; fi
                  - rsync -a --ignore-existing /tmp/home/ /home
                  - rm -rf /tmp/home/
                  # Mount FSxL filesystem as /fsx
                  - mkdir -p /fsx 
                  - mount -t lustre -o relatime,flock ${FSxLustreDns}@tcp:/${FSxLustreMountName} /fsx
                  - chmod 777 /fsx
                --==MYBOUNDARY==
              - EfsFilesystem: !GetAtt [ EfsStorage, Outputs.EFSFilesystemId ]
                FSxLustreDns: !GetAtt FSxLustreLookup.DNSName
                FSxLustreMountName: !GetAtt FSxLustreLookup.MountName
                Region: !Ref AWS::Region

  # Launch template for compute node(s)
  ComputeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'compute-${AWS::StackName}'
      LaunchTemplateData:
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: HPCRecipes
                Value: "true"
        MetadataOptions:
          HttpEndpoint: enabled
          HttpPutResponseHopLimit: 2
          HttpTokens: required
        SecurityGroupIds: 
          - !GetAtt [ PCSSecurityGroup, Outputs.ClusterSecurityGroupId ]
          - !GetAtt [ PCSSecurityGroup, Outputs.InboundSshSecurityGroupId ]
          - !GetAtt [ EfsStorage, Outputs.SecurityGroupId ]
          - !GetAtt [ FSxLStorage, Outputs.FSxLustreSecurityGroupId ]
        UserData:
          Fn::Base64:
            Fn::Sub:
              - |
                MIME-Version: 1.0
                Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

                --==MYBOUNDARY==
                Content-Type: text/cloud-config; charset="us-ascii"
                MIME-Version: 1.0
                
                runcmd:
                  # Mount EFS filesystem as /home
                  - mkdir -p /tmp/home
                  - rsync -a /home/ /tmp/home
                  - echo "${EfsFilesystem}:/ /home efs tls,_netdev" >> /etc/fstab
                  - mount -a -t efs defaults
                  - if [ "enabled" == "$(sestatus | awk "/^SELinux status:/{print $3}")" ]; then setsebool -P use_nfs_home_dirs 1; fi
                  - rsync -a --ignore-existing /tmp/home/ /home
                  - rm -rf /tmp/home/
                  # Mount FSxL filesystem as /fsx
                  - mkdir -p /fsx 
                  - mount -t lustre -o relatime,flock ${FSxLustreDns}@tcp:/${FSxLustreMountName} /fsx
                  - chmod 777 /fsx
                --==MYBOUNDARY==
              - EfsFilesystem: !GetAtt [ EfsStorage, Outputs.EFSFilesystemId ]
                FSxLustreDns: !GetAtt FSxLustreLookup.DNSName
                FSxLustreMountName: !GetAtt FSxLustreLookup.MountName
                Region: !Ref AWS::Region

  Networking:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CreateBackupSubnets: "False"
      TemplateURL: !Sub 'https://${HpcRecipesS3Bucket}.s3.amazonaws.com/${HpcRecipesBranch}/recipes/pcs/try_amd/assets/network.cfn.yaml'

  EfsStorage:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SubnetIds: !GetAtt [ Networking, Outputs.StorageSubnetId ]
        SubnetCount: 1
        VpcId: !GetAtt [ Networking, Outputs.VpcId ]
      TemplateURL: !Sub 'https://${HpcRecipesS3Bucket}.s3.amazonaws.com/${HpcRecipesBranch}/recipes/storage/efs_simple/assets/main.yaml'

  FSxLStorage:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        PerUnitStorageThroughput: 125
        SubnetId: !GetAtt [ Networking, Outputs.StorageSubnetId ]
        VpcId: !GetAtt [ Networking, Outputs.VpcId ]
      TemplateURL: !Sub 'https://${HpcRecipesS3Bucket}.s3.amazonaws.com/${HpcRecipesBranch}/recipes/storage/fsx_lustre/assets/persistent.yaml'

  PCSSecurityGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ClientIpCidr: !Ref ClientIpCidr
        VpcId: !GetAtt [ Networking, Outputs.VpcId ]
      TemplateURL: !Sub 'https://${HpcRecipesS3Bucket}.s3.amazonaws.com/${HpcRecipesBranch}/recipes/pcs/getting_started/assets/pcs-cluster-sg.yaml'

  # Cluster

  PCSCluster:
    Type: AWS::PCS::Cluster
    Properties:
      Name: !Sub '${AWS::StackName}'
      Size: SMALL
      Scheduler:
        Type: SLURM
        Version: !Ref SlurmVersion
      Networking:
        SubnetIds:
          - !GetAtt [ Networking, Outputs.ManagementSubnetId ]
        SecurityGroupIds:
          - !GetAtt [ PCSSecurityGroup, Outputs.ClusterSecurityGroupId ]

  # Compute Node groups
  PCSInstanceProfile:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        # We regionalize this in case customer uses the template in more than one region. Otherwise,
        # the create action will fail since instance-role-${AWS::StackName} already exists!
        RoleName: !Sub '${AWS::StackName}-${AWS::Region}'
      TemplateURL: !Sub 'https://${HpcRecipesS3Bucket}.s3.amazonaws.com/${HpcRecipesBranch}/recipes/pcs/getting_started/assets/pcs-iip-minimal.yaml'

  # Compute Node groups - Login Nodes
  PCSNodeGroupLogin:
    Type: AWS::PCS::ComputeNodeGroup
    Properties:
      ClusterId: !GetAtt [PCSCluster, Id]
      Name: login
      ScalingConfiguration:
        MinInstanceCount: 1
        MaxInstanceCount: 1
      IamInstanceProfileArn: !GetAtt [ PCSInstanceProfile, Outputs.InstanceProfileArn ]
      CustomLaunchTemplate:
        TemplateId: !Ref LoginLaunchTemplate
        Version: !GetAtt [ LoginLaunchTemplate, LatestVersionNumber ]
      SubnetIds:
        - !GetAtt [ Networking, Outputs.AccessSubnetId ]
      AmiId: !GetAtt [PcsSampleAmi, AmiId]
      InstanceConfigs:
        - InstanceType: !FindInMap [ Architecture, LoginNodeInstances, x86 ]

  # Compute Node groups - Compute Nodes (HPC)
  PCSNodeGroupCompute1:
    Type: AWS::PCS::ComputeNodeGroup
    Properties:
      ClusterId: !GetAtt [PCSCluster, Id]
      Name: hpc7a-48xlarge
      ScalingConfiguration:
        MinInstanceCount: 0
        MaxInstanceCount: 4
      IamInstanceProfileArn: !GetAtt [ PCSInstanceProfile, Outputs.InstanceProfileArn ]
      CustomLaunchTemplate:
        TemplateId: !Ref HpcComputeLaunchTemplate
        Version: !GetAtt [ HpcComputeLaunchTemplate, LatestVersionNumber ]
      SubnetIds:
        - !GetAtt [ Networking, Outputs.ComputeSubnetId ]
      AmiId: !GetAtt [PcsSampleAmi, AmiId]
      InstanceConfigs:
        - InstanceType: !FindInMap [ Architecture, ComputeNodeInstances, HPCx86 ]

  # Compute Node groups  - Compute Nodes (Small)
  PCSNodeGroupCompute2:
    Type: AWS::PCS::ComputeNodeGroup
    Properties:
      ClusterId: !GetAtt [PCSCluster, Id]
      Name: c7a-xlarge
      ScalingConfiguration:
        MinInstanceCount: 0
        MaxInstanceCount: 3
      IamInstanceProfileArn: !GetAtt [ PCSInstanceProfile, Outputs.InstanceProfileArn ]
      CustomLaunchTemplate:
        TemplateId: !Ref ComputeLaunchTemplate
        Version: !GetAtt [ ComputeLaunchTemplate, LatestVersionNumber ]
      SubnetIds:
        - !GetAtt [ Networking, Outputs.ComputeSubnetId ]
      AmiId: !GetAtt [PcsSampleAmi, AmiId]
      InstanceConfigs:
        - InstanceType: !FindInMap [ Architecture, ComputeNodeInstances, x86 ]

  PCSQueueCompute1:
    Type: AWS::PCS::Queue
    Properties:
      ClusterId: !GetAtt [PCSCluster, Id]
      Name: large
      ComputeNodeGroupConfigurations:
        - ComputeNodeGroupId: !GetAtt [PCSNodeGroupCompute1, Id]

  PCSQueueCompute2:
    Type: AWS::PCS::Queue
    Properties:
      ClusterId: !GetAtt [PCSCluster, Id]
      Name: small
      ComputeNodeGroupConfigurations:
        - ComputeNodeGroupId: !GetAtt [PCSNodeGroupCompute2, Id]

  PcsAMILookupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EC2DescribeImages
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeImages
                Resource: '*'

  PcsAMILookupFn:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Handler: index.handler
      Role: !GetAtt PcsAMILookupRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import urllib3
          from botocore.exceptions import ClientError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def construct_ami_prefix(os_name, architecture, slurm_version):
              return f'aws-pcs-sample_ami-{os_name}-{architecture}-slurm-{slurm_version}'

          def get_latest_ami(ami_name_prefix):
              ec2_client = boto3.client('ec2')
              filters = [
                  {'Name': 'name','Values': [f'{ami_name_prefix}*']},
                  {'Name': 'owner-alias', 'Values': ['amazon']}
              ]
              response = ec2_client.describe_images(Filters=filters)
              ami_list = response['Images']
              sorted_ami_list = sorted(ami_list, key=lambda x: x['CreationDate'], reverse=True)
              return sorted_ami_list[0]['ImageId'] if sorted_ami_list else None

          def send_response(event, context, response_status, response_data, physical_resource_id=None):
              response_body = {
                  'Status': response_status,
                  'Reason': f'See CloudWatch Log Stream: {context.log_stream_name}',
                  'PhysicalResourceId': physical_resource_id or context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'NoEcho': False,
                  'Data': response_data
              }

              logger.info(f'Response body: {json.dumps(response_body)}')

              http = urllib3.PoolManager()
              try:
                  response = http.request(
                      'PUT',
                      event['ResponseURL'],
                      headers={'Content-Type': 'application/json'},
                      body=json.dumps(response_body).encode('utf-8')
                  )
                  logger.info(f'Status code: {response.status}')
              except Exception as e:
                  logger.error(f'Failed to send response: {str(e)}')
                  raise

          def handler(event, context):
              logger.info(f'Received event: {json.dumps(event)}')
              
              try:
                  properties = event['ResourceProperties']
                  os_name = properties.get('OperatingSystem')
                  architecture = properties.get('Architecture')
                  slurm_version = properties.get('SlurmVersion')
                  
                  # Validate required properties
                  if not all([os_name, architecture, slurm_version]):
                      raise ValueError('OperatingSystem, Architecture, and SlurmVersion are required in ResourceProperties')

                  # Skip actual work on delete
                  if event['RequestType'] == 'Delete':
                      send_response(event, context, 'SUCCESS', {})
                      return

                  ami_name_prefix = construct_ami_prefix(os_name, architecture, slurm_version)
                  logger.info(f'Looking up AMI with prefix: {ami_name_prefix}')
                  
                  ami_id = get_latest_ami(ami_name_prefix)
                  if not ami_id:
                      raise ValueError(f'No AMI found matching prefix: {ami_name_prefix}')

                  response_data = {
                      'AmiId': ami_id,
                      'AmiPrefix': ami_name_prefix
                  }
                  
                  send_response(event, context, 'SUCCESS', response_data, ami_id)

              except Exception as e:
                  logger.error(f'Exception: {str(e)}')
                  send_response(event, context, 'FAILED', {'Error': str(e)})
                  raise
      Timeout: 30
      MemorySize: 128

  # Example of using the custom resource to look up an AMI
  PcsSampleAmi:
    Type: Custom::AMILookup
    Properties:
      ServiceToken: !GetAtt PcsAMILookupFn.Arn
      OperatingSystem: 'amzn2'
      Architecture: !FindInMap [ Architecture, AmiArchParameter, x86 ]
      SlurmVersion: !Ref SlurmVersion

Outputs:
  ClusterId:
    Description: The ID of the PCS cluster
    Value: !GetAtt [ PCSCluster, Id ]
  PcsConsoleUrl:
    Description: URL to access the cluster in the PCS console
    Value: !Sub
      - https://${ConsoleDomain}/pcs/home?region=${AWS::Region}#/clusters/${ClusterId}
      - { ConsoleDomain: !If [ GovCloud, 'console.amazonaws-us-gov.com', !If [ China, 'console.amazonaws.cn', !Sub '${AWS::Region}.console.aws.amazon.com']],
          ClusterId: !GetAtt [ PCSCluster, Id ] 
        }
    Export:
      Name: !Sub ${AWS::StackName}-PcsConsoleUrl
  Ec2ConsoleUrl:
    Description: URL to access instance(s) in the login node group via Session Manager
    Value: !Sub
      - https://${ConsoleDomain}/ec2/home?region=${AWS::Region}#Instances:instanceState=running;tag:aws:pcs:compute-node-group-id=${NodeGroupLoginId}
      - { ConsoleDomain: !If [ GovCloud, 'console.amazonaws-us-gov.com', !If [ China, 'console.amazonaws.cn', !Sub '${AWS::Region}.console.aws.amazon.com']],
          NodeGroupLoginId: !GetAtt [ PCSNodeGroupLogin, Id ] 
        }
    Export:
      Name: !Sub ${AWS::StackName}-Ec2ConsoleUrl
  SshKeyPairSsmParameter:
    Description: Key pair for accessing the login node(s) via SSH
    Value: !Sub
      - https://${ConsoleDomain}/systems-manager/parameters/ec2/keypair/${KeyPairId}/description?region=${AWS::Region}
      - { ConsoleDomain: !If [ GovCloud, 'console.amazonaws-us-gov.com', !If [ China, 'console.amazonaws.cn', !Sub '${AWS::Region}.console.aws.amazon.com']],
          KeyPairId: !GetAtt [ CreatedKeyPair, KeyPairId]
        }
