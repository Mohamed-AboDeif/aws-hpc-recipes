AWSTemplateFormatVersion: '2010-09-09'
Description: Creates an FSx for OpenZFS filesystem and a security group for accessing the filesystem

### Stack metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Filesystem Options
        Parameters:
          - Capacity
          - Compression
          - ThroughputCapacity
          - RecordSize
      - Label:
          default: Networking and Access
        Parameters:
          - VpcId
          - SubnetId

Parameters:
  VpcId:
    Description: VPC where you will deploy the FSx filesystem
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Description: Subnet where you will deploy the FSx filesystem (must be in same VPC)
    Type: AWS::EC2::Subnet::Id
  Capacity:
    Description: Storage capacity (GiB)
    Type: Number
    Default: 256
  Compression:
    Description: Data compression type
    Type: String
    AllowedValues:
      - "LZ4"
      - "ZSTD"
      - "NONE"
    Default: "LZ4"
  RecordSize:
    Description: Record size in KiB for the root volume
    Type: Number
    Default: 128
    AllowedValues:
      - 4
      - 8
      - 16
      - 32
      - 64
      - 128
      - 256
      - 512
      - 1024
  ThroughputCapacity:
    Description: Throughput capacity for the filesystem (MBps)
    Type: Number
    Default: 64
    AllowedValues:
         - 64
         - 128
         - 256
         - 512
         - 1024
         - 2048
         - 3072
         - 4096

Resources:
 
  # Security group
  ZfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow Cross Traffic from VPC to FSx for OpenZFS
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"

  # Clients join this group for access to FSx for OpenZFS filesystem or volume
  ZfsClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic to/from clients to FSx for OpenZFS
      VpcId: !Ref VpcId

  ZfsSecurityGroupInboundRule2049tcp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: Allow incoming TCP connection to NFS server daemon
      FromPort: 2049
      ToPort: 2049
      GroupId: !Ref ZfsSecurityGroup
      SourceSecurityGroupId: !Ref ZfsClientSecurityGroup
  ZfsSecurityGroupInboundRule2049udp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: udp
      Description: Allow incoming UDP connection to NFS server daemon
      FromPort: 2049
      ToPort: 2049
      GroupId: !Ref ZfsSecurityGroup
      SourceSecurityGroupId: !Ref ZfsClientSecurityGroup
  ZfsSecurityGroupInboundRule111tcp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: Allow incoming TCP remote procedure call for NFS
      FromPort: 111
      ToPort: 111
      GroupId: !Ref ZfsSecurityGroup
      SourceSecurityGroupId: !Ref ZfsClientSecurityGroup
  ZfsSecurityGroupInboundRule111udp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: udp
      Description: Allow incoming UDP remote procedure call for NFS
      FromPort: 111
      ToPort: 111
      GroupId: !Ref ZfsSecurityGroup
      SourceSecurityGroupId: !Ref ZfsClientSecurityGroup
  ZfsSecurityGroupInboundRule20001tcp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: Allow incoming TCP traffic to NFS mount, status monitor, and lock daemon
      FromPort: 20001
      ToPort: 20003
      GroupId: !Ref ZfsSecurityGroup
      SourceSecurityGroupId: !Ref ZfsClientSecurityGroup
  ZfsSecurityGroupInboundRule20001udp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: udp
      Description: Allow incoming UDP traffic to NFS mount, status monitor, and lock daemon
      FromPort: 20001
      ToPort: 20003
      GroupId: !Ref ZfsSecurityGroup
      SourceSecurityGroupId: !Ref ZfsClientSecurityGroup

  FSxOpenZFSFilesystem:
    Type: AWS::FSx::FileSystem
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      FileSystemType: OPENZFS
      StorageType: SSD
      StorageCapacity: !Ref Capacity
      SecurityGroupIds:
        - !Ref ZfsSecurityGroup
      SubnetIds:
        - !Ref SubnetId
      OpenZFSConfiguration:
        DeploymentType: SINGLE_AZ_1
        ThroughputCapacity: !Ref ThroughputCapacity
        RootVolumeConfiguration:
          DataCompressionType: !Ref Compression
          RecordSizeKiB: !Ref RecordSize
          NfsExports:
            - ClientConfigurations:
                - Clients: "*"
                  Options: ["crossmnt", "sync", "rw"]

Outputs:
  FSxOpenZFSFilesystemId:
    Description: The ID of the FSxOpenZFS filesystem
    Value: !Ref FSxOpenZFSFilesystem
    Export:
      Name: !Sub ${AWS::StackName}-FSxOpenZFSFilesystemId
  FSxOpenZFSRootVolumeId:
    Description: The root volume ID for the FSxOpenZFS filesystem
    Value: !GetAtt FSxOpenZFSFilesystem.RootVolumeId
    Export:
      Name: !Sub ${AWS::StackName}-FSxOpenZFSRootVolumeId
  FSxOpenZFSSecurityGroupId:
    Description: Security group allowing access to filesystem
    Value: !Ref ZfsClientSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-FSxOpenZFSSecurityGroupId
