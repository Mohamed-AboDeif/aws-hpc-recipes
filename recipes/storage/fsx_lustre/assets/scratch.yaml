AWSTemplateFormatVersion: '2010-09-09'
Description: FSx for Lustre SCRATCH_2 Filesystem.
  This template creates a scratch FSx for Lustre filesystem optimized for temporary high-performance workloads.
  It configures a single-AZ deployment with customizable storage capacity and compression settings.
  Security groups are configured to enable required Lustre network ports (988, 1021-1023) between clients and servers.
  The filesystem supports Lustre versions 2.12 and 2.15 with LZ4 compression for optimized storage efficiency.
  Use this template as a foundation for deploying high-performance temporary storage solutions.
  Refer to the Outputs tab for the filesystem ID, mount name, and security group ID needed to mount the filesystem.

### Stack metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Filesystem Options
        Parameters:
          - Capacity
          - Compression
          - LustreVersion
      - Label:
          default: Networking and Access
        Parameters:
          - VpcId
          - SubnetId
          - SecurityGroupName

Parameters:
  VpcId:
    Description: VPC where you will deploy the FSx filesystem
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Description: Subnet where you will deploy the FSx filesystem (must be in same VPC)
    Type: AWS::EC2::Subnet::Id
  Capacity:
    Description: Storage capacity in GiB (1200 or increments of 2400)
    Type: Number
    Default: 1200
  Compression:
    Description: Data compression type
    Type: String
    AllowedValues:
      - "LZ4"
      - "NONE"
    Default: "LZ4"
  LustreVersion:
    Description: Lustre software version
    Type: String
    AllowedValues:
      - "2.15"
      - "2.12"
    Default: "2.15"
  SecurityGroupName:
    Type: String
    Description: (Optional) An existing security group to associate to the file system. If none is provided, a new security group will be created.
    Default: ""

Conditions:
  CreateSecurityGroup: !Equals ["", !Ref SecurityGroupName]
  UseExistingSecurityGroup: !Not [!Equals ["", !Ref SecurityGroupName]]

Resources:

  LustreServersSG:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateSecurityGroup
    Properties:
      GroupDescription: 'Allows traffic to FSx for Lustre filesystem'
      GroupName: !Sub '${AWS::StackName}-fsxl-security-group'
      VpcId: !Ref VpcId

  LustreClientsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Clients join this group for access to FSx for Lustre filesystem'
      GroupName: !Sub '${AWS::StackName}-fsxl-client-security-group'
      VpcId: !Ref VpcId

  LustreClientsSGfromLustreClients988:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Allows Lustre traffic on port 988 between Lustre clients
      FromPort: 988
      ToPort: 988
      GroupId: !Ref LustreClientsSG
      SourceSecurityGroupId: !Ref LustreClientsSG

  LustreClientsSGxxFROMxxLustreServersSG988:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateSecurityGroup
    Properties:
      IpProtocol: tcp
      Description: Allows Lustre traffic on port 988 between Amazon FSx for Lustre file servers and Lustre clients
      FromPort: 988
      ToPort: 988
      GroupId: !Ref LustreClientsSG
      SourceSecurityGroupId: !Ref LustreServersSG

  LustreClientsSGfromLustreClients1021:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Allows Lustre traffic on ports 1021-23 between Amazon FSx for Lustre file servers
      FromPort: 1021
      ToPort: 1023
      GroupId: !Ref LustreClientsSG
      SourceSecurityGroupId: !Ref LustreClientsSG
  
  LustreClientsSGxxFROMxxLustreServersSG1021:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateSecurityGroup
    Properties:
      IpProtocol: tcp
      Description: Allows Lustre traffic on ports 1021-23 between Amazon FSx for Lustre file servers and Lustre clients
      FromPort: 1021
      ToPort: 1023
      GroupId: !Ref LustreClientsSG
      SourceSecurityGroupId: !Ref LustreServersSG
  
  LustreClientsSGtoLustreClients988:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      Description: Allow Lustre traffic on por 988 between Amazon FSx for Lustre clients
      FromPort: 988
      ToPort: 988
      GroupId: !Ref LustreClientsSG
      DestinationSecurityGroupId: !Ref LustreClientsSG
  
  LustreClientsSGtopclusterLustreServersSG:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: CreateSecurityGroup
    Properties:
      IpProtocol: tcp
      Description: Allow Lustre traffic on port 988 between Amazon FSx for Lustre file servers and Lustre clients
      FromPort: 988
      ToPort: 988
      GroupId: !Ref LustreClientsSG
      DestinationSecurityGroupId: !Ref LustreServersSG

  LustreClientsSGtoLustreClients1021:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: CreateSecurityGroup
    Properties:
      IpProtocol: tcp
      Description: Allows Lustre traffic on ports 1021-23 between Amazon FSx for Lustre clients
      FromPort: 1021
      ToPort: 1023
      GroupId: !Ref LustreClientsSG
      DestinationSecurityGroupId: !Ref LustreClientsSG

  LustreClientsSGtoLustreServersSG:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: CreateSecurityGroup
    Properties:
      IpProtocol: tcp
      Description: Allows Lustre traffic on ports 1021-23 between Amazon FSx for Lustre file servers and Lustre clients
      FromPort: 1021
      ToPort: 1023
      GroupId: !Ref LustreClientsSG
      DestinationSecurityGroupId: !Ref LustreServersSG

  FSxLFilesystem:
    Type: AWS::FSx::FileSystem
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      FileSystemType: LUSTRE
      StorageType: SSD
      FileSystemTypeVersion: !Ref LustreVersion
      StorageCapacity: !Ref Capacity
      SecurityGroupIds:
        - !If 
          - CreateSecurityGroup
          - !Ref LustreServersSG
          - !GetAtt SecurityGroupLookup.GroupId
        - !Ref LustreClientsSG
      SubnetIds:
        - !Ref SubnetId
      LustreConfiguration:
        DataCompressionType: !Ref Compression
        DeploymentType: SCRATCH_2
      Tags:
        - Key: HPCRecipes
          Value: "true"
  
  SecurityGroupLookup:
    Type: Custom::SecurityGroupLookup
    Condition: UseExistingSecurityGroup
    Properties:
      ServiceToken: !GetAtt SecurityGroupLookupFunction.Arn
      ServiceTimeout: 60
      VpcId: !Ref VpcId
      GroupName: !Ref SecurityGroupName

  SecurityGroupLookupRole:
    Type: AWS::IAM::Role
    Condition: UseExistingSecurityGroup
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeSecurityGroups
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ec2:DescribeSecurityGroups
                Resource: '*'

  SecurityGroupLookupFunction:
    Type: AWS::Lambda::Function
    Condition: UseExistingSecurityGroup
    Properties:
      Timeout: 60
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt SecurityGroupLookupRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          
          def handler(event, context):
            try:
              if event['RequestType'] in ['Create', 'Update']:
                ec2 = boto3.client('ec2')
                vpc_id = event['ResourceProperties']['VpcId']
                group_name = event['ResourceProperties']['GroupName']
                
                response = ec2.describe_security_groups(
                  Filters=[
                    {'Name': 'vpc-id', 'Values': [vpc_id]},
                    {'Name': 'group-name', 'Values': [group_name]}
                  ]
                )
                
                if len(response['SecurityGroups']) == 0:
                  raise Exception(f"Security group {group_name} not found in VPC {vpc_id}")
                
                group_id = response['SecurityGroups'][0]['GroupId']
                cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                               {'GroupId': group_id})
              else:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
              cfnresponse.send(event, context, cfnresponse.FAILED, 
                             {'Error': str(e)})

Outputs:
  FSxLustreFilesystemId:
    Description: The ID of the FFSx for Lustre  filesystem that has been created
    Value: !Ref FSxLFilesystem
    Export:
      Name: !Sub ${AWS::StackName}-FSxLustreFilesystemId
  FSxLustreMountName:
    Description: The mount name of the FSxL filesystem that has been created
    Value: !GetAtt FSxLFilesystem.LustreMountName
    Export:
      Name: !Sub ${AWS::StackName}-FSxLustreMountName
  FSxLustreSecurityGroupId:
    Description: Clients join this group for access to the FSx for Lustre filesystem
    Value: !Ref LustreClientsSG
    Export:
      Name: !Sub ${AWS::StackName}-FSxLustreSecurityGroupId
