
Description: Stack for creating a certificate using Let's Encrypt

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Domain Information"
        Parameters:
          - DomainName
      - Label:
          default: "Environment"
        Parameters:
          - SubnetId
          - AdminNodeAmiId
      - Label:
          default: "Certificate Node"
        Parameters:
          - CertificateNodeInstancetype

Parameters:
  DomainName:
    Description: Domain Name for domain that lives in Route53 in account.
    Type: String
    Default: corp.pcluster.com
    AllowedPattern: ^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+$
  SubnetId:
    Description: Choose a subnet to launch the Admin Node in.
    Type: AWS::EC2::Subnet::Id
  AdminNodeAmiId:
    Description: AMI for the Admin Node
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  CertificateNodeInstancetype:
    Description: EC2 instance type for the Certificate Node
    Type: String
    Default: t3.micro

Transform: AWS::Serverless-2016-10-31

Resources:
  CertificateSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Domain certificate
      Name: !Sub [ "Certificate-${StackIdSuffix}", { StackIdSuffix: !Select [ 1, !Split [ '/', !Ref 'AWS::StackId' ] ] } ]

  PrivateKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Domain private key
      Name: !Sub [ "PrivateKey-${StackIdSuffix}", { StackIdSuffix: !Select [ 1, !Split [ '/', !Ref 'AWS::StackId' ] ] } ]

  DisableImdsv1LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        MetadataOptions:
          HttpEndpoint: enabled
          HttpPutResponseHopLimit: 4
          HttpTokens: required

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - route53:ChangeResourceRecordSets
                Effect: Allow
                Resource: "*"
                Condition:
                  StringEquals:
                    route53:ChangeResourceRecordSetsNormalizedRecordNames: "_acme-challenge.*"
                  StringEqualsIfExists:
                    route53:ChangeResourceRecordSetsRecordTypes: "TXT"
                    route53:ChangeResourceRecordSetsActions:
                      - CREATE
                      - DELETE
          PolicyName: ModifyRoute53
        - PolicyDocument:
            Statement:
              - Action:
                  - secretsmanager:PutSecretValue
                Effect: Allow
                Resource:
                  - !Ref CertificateSecret
                  - !Ref PrivateKeySecret
          PolicyName: PutDomainCertificateSecrets
        - PolicyDocument:
            Statement:
              - Action: '*'
                Effect: Allow
                Resource: '*'
          PolicyName: All
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: InstanceRole

  CertificateNode:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      "AWS::CloudFormation::Init":
        configSets:
          setup:
            - install_dependencies
        install_dependencies:
          packages:
            yum:
              git: []
    Properties:
      IamInstanceProfile:
        Ref: InstanceProfile
      ImageId: !Ref AdminNodeAmiId
      InstanceType:
        Ref: CertificateNodeInstancetype
      LaunchTemplate:
        LaunchTemplateId: !Ref 'DisableImdsv1LaunchTemplate'
        Version: !GetAtt 'DisableImdsv1LaunchTemplate.LatestVersionNumber'
      SubnetId: !Ref SubnetId
      Tags:
        - Key: "Name"
          Value: !Sub [ "CertificateNode-${StackIdSuffix}", {StackIdSuffix: !Select [1, !Split ['/', !Ref 'AWS::StackId']]}]
      UserData:
        Fn::Base64:
          !Sub
            - |
              #!/bin/bash -e
              set -o pipefail
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
              yum update -y aws-cfn-bootstrap
              /opt/aws/bin/cfn-init -v --stack "${AWS::StackName}" --resource CertificateNode --configsets setup --region "${AWS::Region}"
              echo "Domain Name: ${DomainName}"
              echo "Domain Certificate Secret: ${CertificateSecret}"
              echo "Domain Private Key Secret: ${PrivateKeySecret}"

              export HOME=/tmp/home
              mkdir -p $HOME

              cd /tmp
              wget https://bootstrap.pypa.io/get-pip.py
              python3 ./get-pip.py
              pip3 install boto3
              eval $(python3 -c "from botocore.credentials import InstanceMetadataProvider, InstanceMetadataFetcher; provider = InstanceMetadataProvider(iam_role_fetcher=InstanceMetadataFetcher(timeout=1000, num_attempts=2)); c = provider.load().get_frozen_credentials(); print(f'export AWS_ACCESS_KEY_ID={c.access_key}'); print(f'export AWS_SECRET_ACCESS_KEY={c.secret_key}'); print(f'export AWS_SESSION_TOKEN={c.token}')")

              mkdir certificates
              cd certificates
              git clone https://github.com/Neilpang/acme.sh.git
              cd acme.sh
              ./acme.sh --install
              ./acme.sh --set-default-ca --server letsencrypt
              ./acme.sh --issue --dns dns_aws --ocsp-must-staple --keylength 4096  -d ${DomainName} -d "*.${DomainName}"

              CERTKEYFILE=$HOME/.acme.sh/${DomainName}/${DomainName}.key
              CERTCERFILE=$HOME/.acme.sh/${DomainName}/${DomainName}.cer

              aws secretsmanager put-secret-value \
                --secret-id ${PrivateKeySecret} \
                --secret-string file://$CERTKEYFILE \
                --region "${AWS::Region}"

              aws secretsmanager put-secret-value \
                --secret-id ${CertificateSecret} \
                --secret-string file://$CERTCERFILE \
                --region "${AWS::Region}"

              /opt/aws/bin/cfn-signal -e "$?" --stack "${AWS::StackName}" --resource CertificateNode --region "${AWS::Region}"

              sudo shutdown now -h

            - { DomainName: !Ref DomainName,
                CertificateSecret: !Ref CertificateSecret,
                PrivateKeySecret: !Ref PrivateKeySecret,
              }

Outputs:
  CertificateArn:
    Value: !Ref CertificateSecret
  PrivateKeySecretArn:
    Value: !Ref PrivateKeySecret
  CertificateNode:
    Value: !Ref CertificateNode
    Description: Instance ID for Management Node
